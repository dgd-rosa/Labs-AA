# -*- coding: utf-8 -*-
"""Lab5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lw04F6rCdlhBM58MyBi7-bOP9Guh4k1_
"""
import warnings

import numpy as np
from sklearn.model_selection import train_test_split

from sklearn.metrics import mean_squared_error, max_error, r2_score
from sklearn.neural_network import MLPRegressor
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline
warnings.filterwarnings('ignore', 'Solver terminated early.*')

# %%Section 2

x2_train = np.load("Real_Estate_Xtrain.npy", "r")
y2_train = np.load("Real_Estate_ytrain.npy", "r")
x2_test = np.load("Real_Estate_Xtest.npy", "r")
y2_test = np.load("Real_Estate_ytest.npy", "r")
train_x, validation_x, train_y, validation_y = train_test_split(x2_train, y2_train, test_size=0.2, shuffle = False, random_state=1)

regr = MLPRegressor(
    hidden_layer_sizes = (52, 26, 13),
    activation = 'relu',
    solver='adam',
    verbose = False,
    early_stopping = True,
    n_iter_no_change = 12,
    max_iter=1000,
    random_state = 1,
    ).fit(train_x, train_y)

y_predict = regr.predict(x2_test)
mse = mean_squared_error(y2_test, y_predict)
max_err = max_error(y2_test, y_predict)
r2_scr = r2_score(y2_test, y_predict)

score = regr.score(x2_test, y2_test)
print("\n\nMLP REGRESSION\n")
print("Mean Squared Error = " + str(mse))
print("Max Error = " + str(max_err))
print("R2 Score = " + str(r2_scr))
print("MLP REGRESSOR Accuracy Score: " + str(score))

####### LINEAR REGRESSION ########

linear_reg = LinearRegression(copy_X=True).fit(x2_train, y2_train)
y_lin_predict = linear_reg.predict(x2_test)

mse = mean_squared_error(y2_test, y_lin_predict)
max_err = max_error(y2_test, y_lin_predict)
lin_score = linear_reg.score(x2_test, y2_test)
r2_scr = r2_score(y2_test, y_lin_predict)
print("\n\nLINEAR REGRESSION\n")
print("Mean Squared Error = " + str(mse))
print("Max Error = " + str(max_err))
print("R2 Score = " + str(r2_scr)) #Indica quanto a variação de variáveis dependes é explicada pelas variáveis independentes
print("Linear Regressor Accuracy Score: " + str(lin_score))

######## Poly Regression ########

polyreg=make_pipeline(PolynomialFeatures(2),LinearRegression()).fit(x2_train, y2_train)

y_poly_predict = polyreg.predict(x2_test)

mse = mean_squared_error(y2_test, y_poly_predict)
max_err = max_error(y2_test, y_poly_predict)
r2_scr = r2_score(y2_test, y_poly_predict)

print("\n\nPOlYNOMIAL REGRESSION\n")
print("Mean Squared Error = " + str(mse))
print("Max Error = " + str(max_err))
print("R2 Score = " + str(r2_scr))

